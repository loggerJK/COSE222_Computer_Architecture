
labcode:     file format elf32-littleriscv
labcode
architecture: riscv:rv32, flags 0x00000012:
EXEC_P, HAS_SYMS
start address 0x00000000

Program Header:
    LOAD off    0x00000060 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000500 memsz 0x00000500 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ec  00000000  00000000  00000060  2**4
                  CONTENTS, ALLOC, LOAD, CODE
  1 .data         00000100  00000400  00000400  00000460  2**4
                  CONTENTS, ALLOC, LOAD, DATA
  2 .riscv.attributes 0000001c  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY
  3 .comment      00000012  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY
  4 .debug_line   0000019c  00000000  00000000  0000058e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_info   00000069  00000000  00000000  0000072a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_abbrev 0000004d  00000000  00000000  00000793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_aranges 00000040  00000000  00000000  000007e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_str    00000091  00000000  00000000  00000820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_frame  00000034  00000000  00000000  000008b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00000400 l    d  .data	00000000 .data
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 lab0.o
00000400 l       .data	00000000 Input_data
00000480 l       .data	00000000 Output_data
00000018 l       .text	00000000 myloop
0000004c l       .text	00000000 COPY
00000030 l       .text	00000000 l1
00000058 l       .text	00000000 COPY_LOOP
000000b0 l       .text	00000000 EXIT
00000074 l       .text	00000000 COMAPARE
00000088 l       .text	00000000 COMPARE_LOOP
000000a0 l       .text	00000000 ERROR
00000000 l    df *ABS*	00000000 SevenSeg.c
00000000 g       .text	00000000 __start
000000cc g     F .text	00000020 SevenSeg



Disassembly of section .text:

00000000 <__start>:
.text
.align 4

__start:

    la   t0, Input_data      # Load Address of Input_data, t0: address of first word of Input_data
   0:	40000293          	li	t0,1024
	addi t1, t0, 4			# t1 : address of next word of [t0]
   4:	00428313          	addi	t1,t0,4
	la   t2, Output_data	# Load Address of Output_data, constant
   8:	48000393          	li	t2,1152
	addi t3, t0, 124		# t3 : address of last word of Input_data, constant
   c:	07c28e13          	addi	t3,t0,124
	mv s3, zero				# s3 : Counter Vairable, Initialzed as Zero
  10:	00000993          	li	s3,0
	addi s4, zero, 31		# s4 : 31 (constant)
  14:	01f00a13          	li	s4,31

00000018 <myloop>:



myloop:
	bge s3, s4, COPY # if s3 >= 31 then EXIT, Counter Variable Check
  18:	0349da63          	bge	s3,s4,4c <COPY>

	lw s0, 0(t0)	# s0 <= [t0]
  1c:	0002a403          	lw	s0,0(t0)
	lw s1, 0(t1)	# s1 <= [t1]
  20:	00032483          	lw	s1,0(t1)

	bgt s0, s1, l1 	## if s0 <= s1, then swap
  24:	0084c663          	blt	s1,s0,30 <l1>
	sw s0, 0(t1)	# [t1] <= s0
  28:	00832023          	sw	s0,0(t1)
	sw s1, 0(t0)	# [t0] <= s1
  2c:	0092a023          	sw	s1,0(t0)

00000030 <l1>:

l1:
	addi t0, t0, 4	# Address Update
  30:	00428293          	addi	t0,t0,4
	addi t1, t1, 4	# Address Update
  34:	00430313          	addi	t1,t1,4

	ble t1, t3, myloop 		# if t1 <= t3 then myloop
  38:	fe6e50e3          	bge	t3,t1,18 <myloop>
	la   t0, Input_data		# Load Address of Input_data, t0: address of first word of Input_data
  3c:	40000293          	li	t0,1024
	addi t1, t0, 4			# t1 : address of next word of [t0]
  40:	00428313          	addi	t1,t0,4
	addi s3, s3, 1			# Counter Variable Update : +1
  44:	00198993          	addi	s3,s3,1
	j myloop				# jump to myloop
  48:	fd1ff06f          	j	18 <myloop>

0000004c <COPY>:


COPY:
	# Initialize Address Variable
	addi s3, zero, 0				# s3 : Counter Vairable, Initialzed as Zero
  4c:	00000993          	li	s3,0
	la   t0, Input_data		# Load Address of Input_data, t0: address of first word of Input_data
  50:	40000293          	li	t0,1024
	la   t2, Output_data	# Load Address of Output_data, constant
  54:	48000393          	li	t2,1152

00000058 <COPY_LOOP>:

COPY_LOOP:
	bgt s3, s4, EXIT # if s3 > 31 then EXIT, Counter Variable Check
  58:	053a4c63          	blt	s4,s3,b0 <EXIT>

	lw s0, 0(t0) # s0 <= [t0]
  5c:	0002a403          	lw	s0,0(t0)
	sw s0, 0(t2) # [t2] <= s0
  60:	0083a023          	sw	s0,0(t2)

	# Address Update
	addi t0, t0, 4 # t0 = t0 + 4
  64:	00428293          	addi	t0,t0,4
	addi t2, t2, 4 # t2 = t2 + 4
  68:	00438393          	addi	t2,t2,4

	# Counter Variable Update
	addi s3, s3, 1 # s3 = s3 + 1
  6c:	00198993          	addi	s3,s3,1

	j COPY_LOOP # jump to COPY_LOOP
  70:	fe9ff06f          	j	58 <COPY_LOOP>

00000074 <COMAPARE>:


COMAPARE:
	la t2, Output_data # Load Address of Output_data, which is constant
  74:	48000393          	li	t2,1152
	li s0, 16		# s0 <= 16
  78:	01000413          	li	s0,16
	lw s1, 0(t2)	 # s1 <= [t2]
  7c:	0003a483          	lw	s1,0(t2)
	mv s3, zero				# s3 : Counter Vairable, Initialzed as Zero
  80:	00000993          	li	s3,0
	addi s4, zero, 31		# s4 : 31 (constant)
  84:	01f00a13          	li	s4,31

00000088 <COMPARE_LOOP>:

COMPARE_LOOP:
	bgt s3, s4, EXIT # if s3 > 31 then EXIT, Counter Variable Check
  88:	033a4463          	blt	s4,s3,b0 <EXIT>

	bne s0, s1, ERROR # if s0 != s1 then ERROR
  8c:	00941a63          	bne	s0,s1,a0 <ERROR>

	addi s0, s0, -1 # s0 = s0 + -1
  90:	fff40413          	addi	s0,s0,-1
	addi s1, s1, 4 # s1 = s1 + 4
  94:	00448493          	addi	s1,s1,4
	addi s3, s3, 1	# Couonter Variable Update
  98:	00198993          	addi	s3,s3,1

	j COMPARE_LOOP  # jump to COMPARE_LOOP
  9c:	fedff06f          	j	88 <COMPARE_LOOP>

000000a0 <ERROR>:



ERROR:
	#  display 2 on HEX1
	li  x10, 0x24
  a0:	02400513          	li	a0,36
	li x3, 0xFFFF2000
  a4:	ffff21b7          	lui	gp,0xffff2
	addi x3, x3, 0x10   # x3 contains 0xFFFF_2010
  a8:	01018193          	addi	gp,gp,16 # ffff2010 <Output_data+0xffff1b90>
	sw  x10, 0(x3)
  ac:	00a1a023          	sw	a0,0(gp)

000000b0 <EXIT>:


EXIT:
	# display 1 on HEX0
	li x10, 0x79
  b0:	07900513          	li	a0,121
	li x3, 0xFFFF2000
  b4:	ffff21b7          	lui	gp,0xffff2
	addi x3, x3, 0xC   	# x3 contains 0xFFFF_200C
  b8:	00c18193          	addi	gp,gp,12 # ffff200c <Output_data+0xffff1b8c>
	sw  x10, 0(x3)
  bc:	00a1a023          	sw	a0,0(gp)
	...

000000cc <SevenSeg>:
#include "SevenSeg.h"

int SevenSeg()
{
  cc:	ff010113          	addi	sp,sp,-16
  d0:	00812623          	sw	s0,12(sp)
  d4:	01010413          	addi	s0,sp,16

    return 0;
  d8:	00000793          	li	a5,0
}
  dc:	00078513          	mv	a0,a5
  e0:	00c12403          	lw	s0,12(sp)
  e4:	01010113          	addi	sp,sp,16
  e8:	00008067          	ret
